// Generated by CoffeeScript 1.3.3
(function() {

  angular.widget("ui:map", function(el) {
    var compiler, defaults, elem, options, pinExpr, viewExpr;
    if (!google || !google.maps) {
      return;
    }
    compiler = this;
    elem = el;
    pinExpr = widgetUtils.parseAttrExpr(el, "ui:pin");
    viewExpr = widgetUtils.parseAttrExpr(el, "ui:view");
    defaults = {
      bindZoom: false,
      bindMapType: false,
      center: {
        lat: 0,
        lng: 0
      },
      pinDraggable: true,
      map: {
        zoom: 4,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      }
    };
    options = widgetUtils.getOptions(el, defaults);
    defaults.map.center = new google.maps.LatLng(defaults.center.lat, defaults.center.lng);
    return function(el) {
      var currentScope, div, map, marker;
      currentScope = this;
      $(elem).append("<div/>");
      div = ("div", elem).get(0);
      map = new google.maps.Map(div, options.map);
      marker = new google.maps.Marker({
        position: map.center,
        map: map
      });
      marker.setDraggable(options.pinDraggable);
      google.maps.event.addListener(map, "click", function(e) {
        var o;
        marker.setPosition(e.latLng);
        marker.setVisible(true);
        o = widgetUtils.getValue(currentScope, pinExpr) || {};
        $.extend(o, {
          lat: e.latLng.lat(),
          lng: e.latLng.lng()
        });
        return widgetUtils.setValue(currentScope, pinExpr, o);
      });
      google.maps.event.addListener(marker, "dragend", function(e) {
        var o;
        o = widgetUtils.getValue(currentScope, pinExpr) || {};
        $.extend(o, {
          lat: e.latLng.lat(),
          lng: e.latLng.lng()
        });
        return widgetUtils.setValue(currentScope, pinExpr, o);
      });
      google.maps.event.addListener(map, "dragend", function() {
        var c, o;
        c = map.getCenter();
        o = widgetUtils.getValue(currentScope, viewExpr) || {};
        $.extend(o, {
          lat: c.lat(),
          lng: c.lng()
        });
        return widgetUtils.setValue(currentScope, viewExpr, o);
      });
      if (defaults.bindZoom) {
        google.maps.event.addListener(map, "zoom_changed", function() {
          var c, o, z;
          c = map.getCenter();
          z = map.getZoom();
          o = widgetUtils.getValue(currentScope, viewExpr) || {};
          $.extend(o, {
            lat: c.lat(),
            lng: c.lng(),
            zoom: z
          });
          return widgetUtils.setValue(currentScope, viewExpr, o);
        });
      }
      if (defaults.bindMapType) {
        google.maps.event.addListener(map, "maptypeid_changed", function() {
          var o, t;
          t = map.getMapTypeId();
          o = widgetUtils.getValue(currentScope, viewExpr) || {};
          $.extend(o, {
            mapType: t
          });
          return widgetUtils.setValue(currentScope, viewExpr, o);
        });
      }
      $(elem).data("map", map);
      $(elem).data("marker", marker);
      currentScope.$watch(pinExpr.expression + ".lat", (function() {
        var newPos;
        map = $(elem).data("map");
        marker = $(elem).data("marker");
        newPos = widgetUtils.getValue(currentScope, pinExpr);
        if (!newPos || !newPos.lat || !newPos.lng) {
          marker.setVisible(false);
          return;
        }
        marker.setPosition(new google.maps.LatLng(newPos.lat, newPos.lng));
        return marker.setVisible(true);
      }), null, true);
      currentScope.$watch(pinExpr.expression + ".lng", (function() {
        var newPos;
        map = $(elem).data("map");
        marker = $(elem).data("marker");
        newPos = widgetUtils.getValue(currentScope, pinExpr);
        if (!newPos || !newPos.lat || !newPos.lng) {
          marker.setVisible(false);
          return;
        }
        marker.setPosition(new google.maps.LatLng(newPos.lat, newPos.lng));
        return marker.setVisible(true);
      }), null, true);
      currentScope.$watch(viewExpr.expression + ".lng", (function() {
        var newPos;
        map = $(elem).data("map");
        newPos = widgetUtils.getValue(currentScope, viewExpr);
        if (newPos) {
          return map.setCenter(new google.maps.LatLng(newPos.lat, newPos.lng));
        }
      }), null, true);
      currentScope.$watch(viewExpr.expression + ".lat", (function() {
        var newPos;
        map = $(elem).data("map");
        newPos = widgetUtils.getValue(currentScope, viewExpr);
        if (newPos) {
          return map.setCenter(new google.maps.LatLng(newPos.lat, newPos.lng));
        }
      }), null, true);
      if (defaults.bindMapType) {
        currentScope.$watch(viewExpr.expression + ".mapType", (function(val) {
          map = $(elem).data("map");
          if (val) {
            return map.setMapTypeId(val);
          }
        }), null, true);
      }
      if (defaults.bindZoom) {
        return currentScope.$watch(viewExpr.expression + ".zoom", (function(val) {
          map = $(elem).data("map");
          if (val) {
            return map.setZoom(val);
          }
        }), null, true);
      }
    };
  });

}).call(this);
